import time
from socket import *

from PyQt5 import QtCore, QtWidgets, QtWebEngineWidgets # pip install pyqtwebengine
from folium.plugins import Draw, MousePosition
import folium, io, sys, json
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QVBoxLayout, QMainWindow, QLabel
import sys
import serial

arduino = serial.Serial('COM3', 9600)

app = QtWidgets.QApplication(sys.argv)

ip = "127.0.0.1"
port = 12345
clientSocket = socket(AF_INET, SOCK_STREAM)  # 소켓 생성
clientSocket.connect((ip, port))  # 서버와 연결

print("연결 확인됐습니다.")

#####folium
m = folium.Map(location=[37,128], zoom_start=13)

draw = Draw(
    draw_options={
        'polyline': False,
        'rectangle': False,
        'polygon': False,
        'circle': False,
        'marker': True,
        'circlemarker': False},
    edit_options={'edit': False})
m.add_child(draw)

formatter = "function(num) {return L.Util.formatNum(num, 3) + ' º ';};"
MousePosition(
    position="topright",
    separator=" | ",
    empty_string="NaN",
    lng_first=True,
    num_digits=20,
    prefix="Coordinates:",
    lat_formatter=formatter,
    lng_formatter=formatter,
).add_to(m)

data = io.BytesIO()
m.save(data, close_file=False)

class WebEnginePage(QtWebEngineWidgets.QWebEnginePage):
    def javaScriptAlert(self, securityOrigin: QtCore.QUrl, msg: str):
        f = open('stdout.txt', 'w')
        sys.stdout = f
        coords_dict = json.loads(msg)
        coords = coords_dict['geometry']['coordinates']
        print(coords)
        sys.stdout = sys.__stdout__
        f.close()
        print(coords)

view = QtWebEngineWidgets.QWebEngineView()
page = WebEnginePage(view) ### get coords
view.setPage(page) ### get coords
view.setHtml(data.getvalue().decode()) # set bytesIO to html for visualzing

##### folium end

##### Qt widget Layout
class WindowClass(QMainWindow) :
    def __init__(self) :
        super().__init__()
        self.coordinates = ""
        self.connected = False

        layout = QVBoxLayout()
        self.folium_output = view

        # self.folium_output(view.show())
        # self.folium_output.show(view.show())
        layout.addWidget(self.folium_output)

        self.btn1 = QPushButton("Send")
        self.btn1.clicked.connect(self.SendData)
        layout.addWidget(self.btn1)

        self.btn2 = QPushButton("Send_to_server")
        self.btn2.clicked.connect(self.SendData_to_Server)
        layout.addWidget(self.btn2)

        self.widget = QWidget()
        self.widget.setLayout(layout)
        self.setCentralWidget(self.widget)

    def SendData(self):
        f = open("stdout.txt", "r")
        for number in f:
            self.coordinates = number
            # longitude = number.split(',')[0][1::]
            # latitude = number.split(',')[1][1:-2]
        f.close()

        self.coordinates = self.coordinates[1:-2].replace(", ", '.')
        print(self.coordinates)
        arduino.write(self.coordinates.encode('utf-8'))

        # time.sleep(1)
        longitude = arduino.readline().decode().strip()
        print("longitude : ", longitude)
        print(type(longitude))
        latitude = arduino.readline().decode().strip()
        print("latitude : ", latitude)
        print(type(latitude))
        print(longitude, latitude)

    def SendData_to_Server(self):
        f = open("stdout.txt", "r")
        for number in f:
            self.coordinates = number
            # longitude = number.split(',')[0][1::]
            # latitude = number.split(',')[1][1:-2]
        f.close()

        self.coordinates = self.coordinates[1:-2].replace(", ", '.')

        clientSocket.send(self.coordinates.encode("utf-8"))  # 데이터 송신

        print("메시지를 전송했습니다.")
        data = clientSocket.recv(1024)  # 데이터 수신

        print("받은 데이터 : ", data.decode("utf-8"))

        # clientSocket.close()  # 연결 종료

w = WindowClass()
w.show()
sys.exit(app.exec_())
